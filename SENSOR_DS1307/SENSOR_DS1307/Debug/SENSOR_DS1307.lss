
SENSOR_DS1307.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000150  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001d4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001579  00000000  00000000  00000330  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000980  00000000  00000000  000018a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b2e  00000000  00000000  00002229  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002d4  00000000  00000000  00002d58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000733  00000000  00000000  0000302c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f9c  00000000  00000000  0000375f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  000046fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	69 00       	.word	0x0069	; ????
  56:	6b 00       	.word	0x006b	; ????
  58:	6d 00       	.word	0x006d	; ????
  5a:	6f 00       	.word	0x006f	; ????
  5c:	71 00       	.word	0x0071	; ????
  5e:	73 00       	.word	0x0073	; ????
  60:	75 00       	.word	0x0075	; ????
  62:	77 00       	.word	0x0077	; ????
  64:	7a 00       	.word	0x007a	; ????
  66:	79 00       	.word	0x0079	; ????

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf e5       	ldi	r28, 0x5F	; 95
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	10 e0       	ldi	r17, 0x00	; 0
  76:	a0 e6       	ldi	r26, 0x60	; 96
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	e0 e5       	ldi	r30, 0x50	; 80
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 36       	cpi	r26, 0x60	; 96
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	20 e0       	ldi	r18, 0x00	; 0
  8c:	a0 e6       	ldi	r26, 0x60	; 96
  8e:	b0 e0       	ldi	r27, 0x00	; 0
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 36       	cpi	r26, 0x60	; 96
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 99 00 	call	0x132	; 0x132 <main>
  9e:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <INIT>:
// Cac ham rieng de su dung nut bam va led 7 thanh 
void INIT()
{

	// Khoi tao trang thai output cho cac chan noi toi led don
	DDRD |= 0xFF;
  a6:	81 b3       	in	r24, 0x11	; 17
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	81 bb       	out	0x11, r24	; 17
	// Khoi tao trang thai logic 1 cho cac chan noi toi cac LED don
	PORTD |= 0xFF;
  ac:	92 b3       	in	r25, 0x12	; 18
  ae:	82 bb       	out	0x12, r24	; 18
	// Khoi tao trang thai output cho cac chan noi toi led 7 thanh
	DDRC = 0xFF;
  b0:	84 bb       	out	0x14, r24	; 20
	// Khoi tao trang thai logic 1 cho cac chan noi toi led 7 thanh
	PORTC |= 0xFF;
  b2:	95 b3       	in	r25, 0x15	; 21
  b4:	85 bb       	out	0x15, r24	; 21
	
	DDRA = 0x00;
  b6:	1a ba       	out	0x1a, r1	; 26
	PORTA = 0x00;
  b8:	1b ba       	out	0x1b, r1	; 27
  ba:	08 95       	ret

000000bc <LED7_OUT>:
	
}
void LED7_OUT(unsigned char num)
{
	// Khai bao bien temp luu trang thai cura PORTC
	unsigned char temp = PORTC;
  bc:	25 b3       	in	r18, 0x15	; 21
	// f - PC6
	// g - PC&
	// dot - PC3
	
	// Tat cac doan LED hien dang sang truoc khi sang cac doan LED moi
	temp &= 0B00001000;
  be:	28 70       	andi	r18, 0x08	; 8
	// gan muc logic cho 8 bit cua bien temp ung voi gia tri bien num
	switch(num)
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	8a 30       	cpi	r24, 0x0A	; 10
  c4:	91 05       	cpc	r25, r1
  c6:	b0 f4       	brcc	.+44     	; 0xf4 <LED7_OUT+0x38>
  c8:	fc 01       	movw	r30, r24
  ca:	e6 5d       	subi	r30, 0xD6	; 214
  cc:	ff 4f       	sbci	r31, 0xFF	; 255
  ce:	0c 94 a0 00 	jmp	0x140	; 0x140 <__tablejump2__>
	{
		case 0: temp |= 0B10000000; break;
  d2:	20 68       	ori	r18, 0x80	; 128
  d4:	0f c0       	rjmp	.+30     	; 0xf4 <LED7_OUT+0x38>
		case 1: temp |= 0B11100011; break;
  d6:	23 6e       	ori	r18, 0xE3	; 227
  d8:	0d c0       	rjmp	.+26     	; 0xf4 <LED7_OUT+0x38>
		case 2: temp |= 0B01000100; break;
  da:	24 64       	ori	r18, 0x44	; 68
  dc:	0b c0       	rjmp	.+22     	; 0xf4 <LED7_OUT+0x38>
		case 3: temp |= 0B01000001; break;
  de:	21 64       	ori	r18, 0x41	; 65
  e0:	09 c0       	rjmp	.+18     	; 0xf4 <LED7_OUT+0x38>
		case 4: temp |= 0B00100011; break;
  e2:	23 62       	ori	r18, 0x23	; 35
  e4:	07 c0       	rjmp	.+14     	; 0xf4 <LED7_OUT+0x38>
		case 5: temp |= 0B00010001; break;
  e6:	21 61       	ori	r18, 0x11	; 17
  e8:	05 c0       	rjmp	.+10     	; 0xf4 <LED7_OUT+0x38>
		case 6: temp |= 0B00010000; break;
  ea:	20 61       	ori	r18, 0x10	; 16
  ec:	03 c0       	rjmp	.+6      	; 0xf4 <LED7_OUT+0x38>
		case 7: temp |= 0B11000011; break;
  ee:	23 6c       	ori	r18, 0xC3	; 195
  f0:	01 c0       	rjmp	.+2      	; 0xf4 <LED7_OUT+0x38>
		case 8: temp |= 0B00000000; break;
		case 9: temp |= 0B00000001; break;
  f2:	21 60       	ori	r18, 0x01	; 1
		
	}
	// Xuat gia tri logic moi ra PORTC de lam led 7 thanh sang
	PORTC = temp;
  f4:	25 bb       	out	0x15, r18	; 21
  f6:	08 95       	ret

000000f8 <PORT>:
	/* Khai bao cac bien se dung toi trong ham nay*/
	// Bien led_shift = 255;
	// Gia tri dau tien la 255 = 0xFF = 0b11111111 -> Tat ca ca LED deu tat
	unsigned char led_shift = 255;
	// Bien dem cho LED 7 thanh, gia tri bat dau la
	unsigned char led_7_count = 0;
  f8:	c0 e0       	ldi	r28, 0x00	; 0
void PORT()
{
	/* Khai bao cac bien se dung toi trong ham nay*/
	// Bien led_shift = 255;
	// Gia tri dau tien la 255 = 0xFF = 0b11111111 -> Tat ca ca LED deu tat
	unsigned char led_shift = 255;
  fa:	df ef       	ldi	r29, 0xFF	; 255
	for(;;)
	{
		/*-------------------------------- Dieu khien cac LED don--------------------------- */
		
		// cac LED sang/tat theo 8 bit cua bien led_shift
		PORTD = led_shift;
  fc:	d2 bb       	out	0x12, r29	; 18
		// thay doi bien led_shift
		if(led_shift!=0)               //Neu led shift khac 0
  fe:	dd 23       	and	r29, r29
 100:	11 f0       	breq	.+4      	; 0x106 <PORT+0xe>
		led_shift = led_shift << 1;//Dich trai 1 bit
 102:	dd 0f       	add	r29, r29
 104:	01 c0       	rjmp	.+2      	; 0x108 <PORT+0x10>
		else
		led_shift = 255; // Tro lai gia tri 255
 106:	df ef       	ldi	r29, 0xFF	; 255
		
		/*---------------------------Doan ma dieu khien LED 7 thanh----------------------------------*/
		// Xuat gia tri dem ra LED 7 thanh
		LED7_OUT(led_7_count);
 108:	8c 2f       	mov	r24, r28
 10a:	0e 94 5e 00 	call	0xbc	; 0xbc <LED7_OUT>
		// Dao trang thai PC3 de nhap nhay dau cham tren LED 7 thanh
		PORTC ^= (1<<PC3);
 10e:	95 b3       	in	r25, 0x15	; 21
 110:	88 e0       	ldi	r24, 0x08	; 8
 112:	89 27       	eor	r24, r25
 114:	85 bb       	out	0x15, r24	; 21
		// Tang dan gia tri dem
		led_7_count = led_7_count + 1;
 116:	cf 5f       	subi	r28, 0xFF	; 255
		
		// Khi vuot qua 9, gia tri dem duoc reset ve 0
		if(led_7_count > 9)
 118:	ca 30       	cpi	r28, 0x0A	; 10
 11a:	08 f0       	brcs	.+2      	; 0x11e <PORT+0x26>
		led_7_count = 0;
 11c:	c0 e0       	ldi	r28, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	80 e7       	ldi	r24, 0x70	; 112
 122:	92 e0       	ldi	r25, 0x02	; 2
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <PORT+0x2c>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <PORT+0x36>
 12e:	00 00       	nop
 130:	e5 cf       	rjmp	.-54     	; 0xfc <PORT+0x4>

00000132 <main>:
	*lm = 1;
	*ly = y + 1;
}

int main(void) {
	INIT();
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <INIT>
	PORT();
 136:	0e 94 7c 00 	call	0xf8	; 0xf8 <PORT>
		//}
		//lcd_print_xy(1, 0, buffer);
//
		//_delay_ms(300);
	//}
}
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	08 95       	ret

00000140 <__tablejump2__>:
 140:	ee 0f       	add	r30, r30
 142:	ff 1f       	adc	r31, r31
 144:	05 90       	lpm	r0, Z+
 146:	f4 91       	lpm	r31, Z
 148:	e0 2d       	mov	r30, r0
 14a:	09 94       	ijmp

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
